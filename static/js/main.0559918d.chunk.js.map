{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","props","console","log","this","className","href","url","rel","target","src","imageSrc","alt","category","name","address","city","state","zipCode","rating","reviewCount","React","Component","BusinessList","businesses","map","id","SearchBar","handleTermChange","event","setState","term","value","location","sortBy","sortByOptions","bind","handleLocationChange","handleSearch","sortByOption","searchYelp","preventDefault","Object","keys","sortByOptionValue","getSortByClass","onClick","handleSortByChange","renderSortByOptions","onChange","placeholder","require","config","apiKey","process","APIKEY","Yelp","search","fetch","headers","Authorization","response","json","jsonResponse","image_url","zip_code","categories","title","review_count","error","App","then","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0559918d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n\r\nbusiness = this.props.business;\r\nrender () {\r\n  console.log(this.business)\r\n  return (\r\n    <div className=\"Business\">\r\n      <div className=\"image-container\">\r\n        <a href={this.business.url} rel=\"noopener noreferrer\" target=\"_blank\">\r\n        <img src={this.business.imageSrc} alt={this.business.category}/>\r\n        </a>\r\n      </div>\r\n      <h2>{this.business.name}</h2>\r\n      <div className=\"Business-information\">\r\n        <div className=\"Business-address\">\r\n          <p>{this.business.address}</p>\r\n          <p>{this.business.city}</p>\r\n          <p>{this.business.state} {this.business.zipCode}</p>\r\n        </div>\r\n        <div className=\"Business-reviews\">\r\n          <h3>{this.business.category}</h3>\r\n          <h3 className=\"rating\">{this.business.rating} stars</h3>\r\n          <p>{this.business.reviewCount} reviews</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n};\r\n   \r\n\r\nexport default Business;","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from '../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n\r\nrender () {\r\n  return (\r\n    <div className=\"BusinessList\">\r\n    {this.props.businesses.map(business=>(\r\n          <Business business={business} key={business.id} />\r\n    ))}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default BusinessList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      term:'',\r\n      location:'',\r\n      sortBy:'best_match'\r\n    };\r\n\r\n    this.sortByOptions = {\r\n      'Best Match': 'best_match',\r\n      'Highest Rated': 'rating',\r\n      'Most Reviewed': 'review_count',\r\n      'Closer': 'distance'\r\n    }\r\n\r\n    this.handleTermChange = this.handleTermChange.bind(this);\r\n    this.handleLocationChange = this.handleLocationChange.bind(this);\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n\r\n  }\r\n\r\n    getSortByClass (sortByOption) {\r\n      return this.state.sortBy === sortByOption ? 'active' : '' ;\r\n    }\r\n\r\n    handleSortByChange(sortByOption) {\r\n      this.setState({ sortBy: sortByOption });\r\n    }\r\n    \r\n    handleTermChange=(event) =>{\r\n      this.setState({ term: event.target.value });\r\n    }\r\n    \r\n    handleLocationChange(event) {\r\n      this.setState({ location: event.target.value });\r\n    }\r\n\r\n    handleSearch(event) {\r\n      this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n      event.preventDefault();\r\n    }\r\n\r\n  renderSortByOptions() {\r\n    return Object.keys(this.sortByOptions).map(sortByOption =>{\r\n      let sortByOptionValue = this.sortByOptions[sortByOption];\r\n      return (\r\n      <li className={this.getSortByClass(sortByOptionValue)} key={sortByOptionValue} onClick={this.handleSortByChange.bind(this, sortByOptionValue)} >{sortByOption}</li>\r\n      );\r\n    });\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"SearchBar\">\r\n        <div className=\"SearchBar-sort-options\">\r\n          <ul>\r\n            {this.renderSortByOptions()}\r\n          </ul>\r\n        </div>\r\n        <div className=\"SearchBar-fields\">\r\n          <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\r\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\r\n        </div>\r\n        <div className=\"SearchBar-submit\">\r\n          <a onClick={this.handleSearch} href='www.#.com' >Let's Go</a>\r\n        </div>\r\n      </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","require('dotenv').config();\r\n\r\n//const apiKey =\"h4Wlcne7eV9gHRIMaUBpOO8EhD9yOfJJxJ4t7bFrK2qtA-sxqiB9DwayY0GIj-_Kv-EkpAAZrFTDZ5jyvh46ta4hTFpbRKngPkopE6a0K7CmgNi9Vs5xObf7opeAYHYx\";\r\nconst apiKey = process.env.APIKEY;\r\nconsole.log(apiKey)\r\nconst Yelp = {\r\n  async search(term, location, sortBy) {\r\n    const response = await fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\r\n      { headers: { Authorization: `Bearer ${apiKey}` } }\r\n    );\r\n    const jsonResponse = await response.json();\r\n    console.log(jsonResponse);\r\n    try {\r\n      if (jsonResponse.businesses) {\r\n        return jsonResponse.businesses.map((business) => {\r\n          return {\r\n            id: business.id,\r\n            imageSrc: business.image_url,\r\n            name: business.name,\r\n            address: business.location.address,\r\n            city: business.location.city,\r\n            state: business.location.state,\r\n            zipCode: business.location.zip_code,\r\n            category: business.categories[0].title,\r\n            rating: business.rating,\r\n            reviewCount: business.review_count,\r\n            url: business.url,\r\n          };\r\n        });\r\n      } else {\r\n        console.log(\"hello world\");\r\n      }\r\n    } catch (e) {\r\n      console.error(`Hello World ${e}`);\r\n    }\r\n  },\r\n};\r\n\r\nexport default Yelp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport BusinessList from \"../BusinessList/BusinessList\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport Yelp from \"../../util/Yelp\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: [],\n    };\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n\n  searchYelp(term, location, sortBy) {\n    console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`);\n    Yelp.search(term, location, sortBy).then((businesses) => {\n      this.setState({ businesses: businesses });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Apollo Yelp API Project</h1>\n        <SearchBar searchYelp={this.searchYelp} />\n        <BusinessList businesses={this.state.businesses} />\n        <footer>\n          <span>\n            This project is reproduced from &copy;Codecademy project Ravenous Yelp clone application\n          </span>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}